/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import GUI.inventory_full;
import Code.JpanelLoader;
import Code.db;
import Code.inv_editController;
import Code.inv_editModel;
import com.mysql.cj.util.SearchMode;
import java.awt.HeadlessException;
import java.awt.TextArea;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.InputMismatchException;
import java.util.Vector;
import javax.print.attribute.standard.Sides;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Kavishika
 *
 */
public class emp_salary_monpay extends javax.swing.JPanel {

    /**
     * Creates new form inventory
     */
    inv_editModel objeditmodel;
    inv_editController objeditcontroller;
    JpanelLoader jpload = new JpanelLoader();

    public emp_salary_monpay() {
        initComponents();
        objeditcontroller = new inv_editController();
        //txt_pid.setEnabled(false);
        tb_load();

        btn_pay.setVisible(false);

        /*txt_newstk.setVisible(false);
        txt_newstk.revalidate();
        txt_newstk.repaint();*/
        //disablefields();
    }

    int tblselectedeid;
    String tblselectedstatus = "";

    public void tb_load() {
        try {

            String month = getmonth();
            int year = getyear();

            DefaultTableModel dt = (DefaultTableModel) table_inventory.getModel();
            dt.setRowCount(0);

            Statement s = db.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT empid,empname,paymonth,paiddate,amount,status FROM employee_salary WHERE paymonth='" + month + "' AND payyear='" + year + "' ORDER BY status ASC");

            //SELECT empid,empname,paymonth FROM employee_salary WHERE paymonth='" + month + "' AND payyear='"+year+"' AND status='0' 
            while (rs.next()) {

                Vector v = new Vector();

                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                if (rs.getString(6).equals("1")) {
                    v.add("Paid");
                } else {
                    v.add("Not Paid");
                }

                dt.addRow(v);

            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    public String getmonth() {
        String[] months = new DateFormatSymbols().getMonths();
        Calendar cal = Calendar.getInstance();
        String month = months[cal.get(Calendar.MONTH)];

        return month;
    }

    public int getday() {
        LocalDate currentdate = LocalDate.now();
        int currentDay = currentdate.getDayOfMonth();

        return currentDay;
    }

    public int getyear() {
        LocalDate currentdate = LocalDate.now();
        int currentYear = currentdate.getYear();

        return currentYear;
    }

    public String gettime() {
        LocalTime time = LocalTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String timenow = time.format(formatter);

        return timenow;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_stk = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btn_pay = new javax.swing.JButton();
        txt_search = new javax.swing.JTextField();
        lbl_sname = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_inventory = new javax.swing.JTable();
        btn_edit1 = new javax.swing.JButton();

        jPanel1.setMaximumSize(new java.awt.Dimension(1280, 720));

        btn_pay.setBackground(new java.awt.Color(225, 77, 42));
        btn_pay.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        btn_pay.setText("Pay");
        btn_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_payActionPerformed(evt);
            }
        });

        txt_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchActionPerformed(evt);
            }
        });
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_searchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        lbl_sname.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbl_sname.setText("Employee Name");

        table_inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Emp ID", "Employee Name", "Month to be paid", "Paid Date", "Amount", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_inventory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                table_inventoryFocusLost(evt);
            }
        });
        table_inventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_inventoryMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                table_inventoryMouseEntered(evt);
            }
        });
        table_inventory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                table_inventoryKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table_inventory);

        btn_edit1.setText("Export PDF");
        btn_edit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_edit1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_sname)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_search))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1348, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_edit1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_sname))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_pay)
                    .addComponent(btn_edit1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchActionPerformed

    private void btn_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_payActionPerformed
        // TODO add your handling code here:

        //pay employee
        if (!(table_inventory.getSelectionModel().isSelectionEmpty())) {
            //panel_stock.setVisible(true);
            //radio_addstock.setSelected(true);

            int eid = tblselectedeid;
            String month = getmonth();
            int year = getyear();
            int day = getday();
            if (tblselectedstatus.equals("Paid")) {

                try {
                    Statement st = db.mycon().createStatement();
                    st.executeUpdate("UPDATE employee_salary SET status='" + 0 + "',paiddate='' WHERE empid='" + eid + "' AND paymonth='" + month + "' AND payyear='" + year + "'");
                    //JOptionPane.showMessageDialog(null, "Product has been disabled from inventory");
                } catch (Exception error) {
                    System.out.println(error);
                }
            } else {
                if (tblselectedstatus.equals("Not Paid")) {

                    try {
                        Statement st = db.mycon().createStatement();
                        st.executeUpdate("UPDATE employee_salary SET status='" + 1 + "',paiddate='" + day + " - " + month + " - " + year + "' WHERE empid='" + eid + "' AND paymonth='" + month + "' AND payyear='" + year + "'");
                        //JOptionPane.showMessageDialog(null, "Product has been enabled from inventory");
                    } catch (Exception error) {
                        System.out.println(error);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an employee first");
        }

        tb_load();
    }//GEN-LAST:event_btn_payActionPerformed

    private void table_inventoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_inventoryKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_table_inventoryKeyPressed

    private void table_inventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_inventoryMouseClicked
        // TODO add your handling code here:
        btn_pay.setVisible(true);

        int r = table_inventory.getSelectedRow();

        tblselectedeid = Integer.parseInt(table_inventory.getValueAt(r, 0).toString());
        tblselectedstatus = table_inventory.getValueAt(r, 5).toString();
        if (tblselectedstatus.equals("Paid")) {
            btn_pay.setText("Undo");

        } else {
            btn_pay.setText("Pay");
        }
    }//GEN-LAST:event_table_inventoryMouseClicked

    private void txt_searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchKeyPressed

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        // TODO add your handling code here:
        try {

            String month = getmonth();
            int year = getyear();

            DefaultTableModel dt = (DefaultTableModel) table_inventory.getModel();
            dt.setRowCount(0);
            String searchkey = txt_search.getText();

            Statement s = db.mycon().createStatement();
            ResultSet rs = s.executeQuery("SELECT empid,empname,paymonth,paiddate,amout,status FROM employee_salary WHERE paymonth='" + month + "' AND payyear='" + year + "' "
                    + "AND empname LIKE '%" + searchkey + "%' ORDER BY status ASC");

            while (rs.next()) {

                Vector v = new Vector();

                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                if (rs.getString(6).equals("1")) {
                    v.add("Paid");
                } else {
                    v.add("Not Paid");
                }

                dt.addRow(v);

            }

        } catch (SQLException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_txt_searchKeyReleased

    private void table_inventoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_table_inventoryFocusLost
        // TODO add your handling code here:
        //btn_addstock.setEnabled(false);
    }//GEN-LAST:event_table_inventoryFocusLost

    private void table_inventoryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_inventoryMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_table_inventoryMouseEntered

    private void btn_edit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_edit1ActionPerformed
        // TODO add your handling code here:

        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showSaveDialog(this);
        if (x == JFileChooser.APPROVE_OPTION) {
            path = j.getSelectedFile().getPath();

        }
        Document doc = new Document();
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + "Employee Salary.pdf"));
            doc.open();
            PdfPTable tbl = new PdfPTable(6);
            tbl.addCell("Employee ID");
            tbl.addCell("Employee Name");
            tbl.addCell("Month to be paid");
            tbl.addCell("Paid Date");
            tbl.addCell("Amount");
            tbl.addCell("Status");

            for (int i = 0; i < table_inventory.getRowCount(); i++) {
                String d1 = table_inventory.getValueAt(i, 0).toString();
                String d2 = table_inventory.getValueAt(i, 1).toString();
                String d3 = table_inventory.getValueAt(i, 2).toString();
                String d4 = table_inventory.getValueAt(i, 3).toString();
                String d5 = table_inventory.getValueAt(i, 4).toString();
                String d6 = table_inventory.getValueAt(i, 5).toString();

                tbl.addCell(d1);
                tbl.addCell(d2);
                tbl.addCell(d3);
                tbl.addCell(d4);
                tbl.addCell(d5);
                tbl.addCell(d6);
            }
            doc.add(tbl);
            JOptionPane.showMessageDialog(null, "PDF Generated");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something went wrong");
        }
        doc.close();

    }//GEN-LAST:event_btn_edit1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_edit1;
    private javax.swing.JButton btn_pay;
    private javax.swing.ButtonGroup buttonGroup_stk;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_sname;
    private javax.swing.JTable table_inventory;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
}
